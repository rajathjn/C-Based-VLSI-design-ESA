// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="eq,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.743000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=300,HLS_SYN_LUT=613,HLS_VERSION=2019_2}" *)

module eq (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        ap_return
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a;
input  [31:0] b;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [64:0] mul_ln4_fu_49_p2;
reg   [64:0] mul_ln4_reg_121;
reg   [0:0] tmp_2_reg_126;
reg   [28:0] tmp_reg_132;
wire   [31:0] add_ln4_fu_115_p2;
reg   [31:0] add_ln4_reg_137;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire  signed [31:0] sext_ln4_fu_45_p0;
wire  signed [31:0] mul_ln4_fu_49_p0;
wire  signed [31:0] tmp_2_fu_55_p1;
wire   [64:0] sub_ln4_fu_73_p2;
wire   [28:0] tmp_3_fu_78_p4;
wire  signed [31:0] sext_ln4_1_fu_88_p1;
wire  signed [31:0] sext_ln4_2_fu_92_p1;
wire   [31:0] select_ln4_fu_95_p3;
wire   [31:0] sub_ln4_1_fu_102_p2;
wire   [31:0] select_ln4_1_fu_108_p3;
wire   [31:0] grp_fu_42_p1;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

eq_sitofp_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
eq_sitofp_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln4_reg_137),
    .ce(1'b1),
    .dout(grp_fu_42_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln4_reg_137 <= add_ln4_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        mul_ln4_reg_121[64 : 1] <= mul_ln4_fu_49_p2[64 : 1];
        tmp_2_reg_126 <= tmp_2_fu_55_p1[32'd31];
        tmp_reg_132 <= {{mul_ln4_fu_49_p2[64:36]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln4_fu_115_p2 = (a + select_ln4_1_fu_108_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return = grp_fu_42_p1;

assign mul_ln4_fu_49_p0 = sext_ln4_fu_45_p0;

assign mul_ln4_fu_49_p2 = ($signed(mul_ln4_fu_49_p0) * $signed(65'h19999999A));

assign select_ln4_1_fu_108_p3 = ((tmp_2_reg_126[0:0] === 1'b1) ? sub_ln4_1_fu_102_p2 : sext_ln4_2_fu_92_p1);

assign select_ln4_fu_95_p3 = ((tmp_2_reg_126[0:0] === 1'b1) ? sext_ln4_1_fu_88_p1 : sext_ln4_2_fu_92_p1);

assign sext_ln4_1_fu_88_p1 = $signed(tmp_3_fu_78_p4);

assign sext_ln4_2_fu_92_p1 = $signed(tmp_reg_132);

assign sext_ln4_fu_45_p0 = b;

assign sub_ln4_1_fu_102_p2 = (32'd0 - select_ln4_fu_95_p3);

assign sub_ln4_fu_73_p2 = (65'd0 - mul_ln4_reg_121);

assign tmp_2_fu_55_p1 = b;

assign tmp_3_fu_78_p4 = {{sub_ln4_fu_73_p2[64:36]}};

always @ (posedge ap_clk) begin
    mul_ln4_reg_121[0] <= 1'b0;
end

endmodule //eq

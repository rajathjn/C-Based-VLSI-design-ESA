// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "eq.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic eq::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic eq::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> eq::ap_ST_fsm_state1 = "1";
const sc_lv<6> eq::ap_ST_fsm_state2 = "10";
const sc_lv<6> eq::ap_ST_fsm_state3 = "100";
const sc_lv<6> eq::ap_ST_fsm_state4 = "1000";
const sc_lv<6> eq::ap_ST_fsm_state5 = "10000";
const sc_lv<6> eq::ap_ST_fsm_state6 = "100000";
const sc_lv<32> eq::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> eq::ap_const_lv32_1 = "1";
const sc_lv<32> eq::ap_const_lv32_2 = "10";
const sc_lv<65> eq::ap_const_lv65_19999999A = "110011001100110011001100110011010";
const sc_lv<32> eq::ap_const_lv32_1F = "11111";
const sc_lv<32> eq::ap_const_lv32_24 = "100100";
const sc_lv<32> eq::ap_const_lv32_40 = "1000000";
const sc_lv<65> eq::ap_const_lv65_0 = "00000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> eq::ap_const_lv32_5 = "101";
const bool eq::ap_const_boolean_1 = true;

eq::eq(sc_module_name name) : sc_module(name), mVcdFile(0) {
    eq_sitofp_32ns_32bkb_U1 = new eq_sitofp_32ns_32bkb<1,4,32,32>("eq_sitofp_32ns_32bkb_U1");
    eq_sitofp_32ns_32bkb_U1->clk(ap_clk);
    eq_sitofp_32ns_32bkb_U1->reset(ap_rst);
    eq_sitofp_32ns_32bkb_U1->din0(add_ln4_reg_137);
    eq_sitofp_32ns_32bkb_U1->ce(ap_var_for_const0);
    eq_sitofp_32ns_32bkb_U1->dout(grp_fu_42_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln4_fu_115_p2);
    sensitive << ( a );
    sensitive << ( select_ln4_1_fu_108_p3 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_fu_42_p1 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_mul_ln4_fu_49_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sext_ln4_fu_45_p0 );

    SC_METHOD(thread_mul_ln4_fu_49_p2);
    sensitive << ( mul_ln4_fu_49_p0 );

    SC_METHOD(thread_select_ln4_1_fu_108_p3);
    sensitive << ( tmp_2_reg_126 );
    sensitive << ( sext_ln4_2_fu_92_p1 );
    sensitive << ( sub_ln4_1_fu_102_p2 );

    SC_METHOD(thread_select_ln4_fu_95_p3);
    sensitive << ( tmp_2_reg_126 );
    sensitive << ( sext_ln4_1_fu_88_p1 );
    sensitive << ( sext_ln4_2_fu_92_p1 );

    SC_METHOD(thread_sext_ln4_1_fu_88_p1);
    sensitive << ( tmp_3_fu_78_p4 );

    SC_METHOD(thread_sext_ln4_2_fu_92_p1);
    sensitive << ( tmp_reg_132 );

    SC_METHOD(thread_sext_ln4_fu_45_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( b );

    SC_METHOD(thread_sub_ln4_1_fu_102_p2);
    sensitive << ( select_ln4_fu_95_p3 );

    SC_METHOD(thread_sub_ln4_fu_73_p2);
    sensitive << ( mul_ln4_reg_121 );

    SC_METHOD(thread_tmp_2_fu_55_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( b );

    SC_METHOD(thread_tmp_3_fu_78_p4);
    sensitive << ( sub_ln4_fu_73_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "eq_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, mul_ln4_fu_49_p2, "mul_ln4_fu_49_p2");
    sc_trace(mVcdFile, mul_ln4_reg_121, "mul_ln4_reg_121");
    sc_trace(mVcdFile, tmp_2_reg_126, "tmp_2_reg_126");
    sc_trace(mVcdFile, tmp_reg_132, "tmp_reg_132");
    sc_trace(mVcdFile, add_ln4_fu_115_p2, "add_ln4_fu_115_p2");
    sc_trace(mVcdFile, add_ln4_reg_137, "add_ln4_reg_137");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, sext_ln4_fu_45_p0, "sext_ln4_fu_45_p0");
    sc_trace(mVcdFile, mul_ln4_fu_49_p0, "mul_ln4_fu_49_p0");
    sc_trace(mVcdFile, tmp_2_fu_55_p1, "tmp_2_fu_55_p1");
    sc_trace(mVcdFile, sub_ln4_fu_73_p2, "sub_ln4_fu_73_p2");
    sc_trace(mVcdFile, tmp_3_fu_78_p4, "tmp_3_fu_78_p4");
    sc_trace(mVcdFile, sext_ln4_1_fu_88_p1, "sext_ln4_1_fu_88_p1");
    sc_trace(mVcdFile, sext_ln4_2_fu_92_p1, "sext_ln4_2_fu_92_p1");
    sc_trace(mVcdFile, select_ln4_fu_95_p3, "select_ln4_fu_95_p3");
    sc_trace(mVcdFile, sub_ln4_1_fu_102_p2, "sub_ln4_1_fu_102_p2");
    sc_trace(mVcdFile, select_ln4_1_fu_108_p3, "select_ln4_1_fu_108_p3");
    sc_trace(mVcdFile, grp_fu_42_p1, "grp_fu_42_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("eq.hdltvin.dat");
    mHdltvoutHandle.open("eq.hdltvout.dat");
}

eq::~eq() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete eq_sitofp_32ns_32bkb_U1;
}

void eq::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void eq::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln4_reg_137 = add_ln4_fu_115_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        mul_ln4_reg_121 = mul_ln4_fu_49_p2.read();
        tmp_2_reg_126 = tmp_2_fu_55_p1.read().range(31, 31);
        tmp_reg_132 = mul_ln4_fu_49_p2.read().range(64, 36);
    }
}

void eq::thread_add_ln4_fu_115_p2() {
    add_ln4_fu_115_p2 = (!a.read().is_01() || !select_ln4_1_fu_108_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(a.read()) + sc_biguint<32>(select_ln4_1_fu_108_p3.read()));
}

void eq::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void eq::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void eq::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void eq::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void eq::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void eq::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void eq::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void eq::thread_ap_return() {
    ap_return = grp_fu_42_p1.read();
}

void eq::thread_mul_ln4_fu_49_p0() {
    mul_ln4_fu_49_p0 = sext_ln4_fu_45_p0.read();
}

void eq::thread_mul_ln4_fu_49_p2() {
    mul_ln4_fu_49_p2 = (!mul_ln4_fu_49_p0.read().is_01() || !ap_const_lv65_19999999A.is_01())? sc_lv<65>(): sc_bigint<32>(mul_ln4_fu_49_p0.read()) * sc_biguint<65>(ap_const_lv65_19999999A);
}

void eq::thread_select_ln4_1_fu_108_p3() {
    select_ln4_1_fu_108_p3 = (!tmp_2_reg_126.read()[0].is_01())? sc_lv<32>(): ((tmp_2_reg_126.read()[0].to_bool())? sub_ln4_1_fu_102_p2.read(): sext_ln4_2_fu_92_p1.read());
}

void eq::thread_select_ln4_fu_95_p3() {
    select_ln4_fu_95_p3 = (!tmp_2_reg_126.read()[0].is_01())? sc_lv<32>(): ((tmp_2_reg_126.read()[0].to_bool())? sext_ln4_1_fu_88_p1.read(): sext_ln4_2_fu_92_p1.read());
}

void eq::thread_sext_ln4_1_fu_88_p1() {
    sext_ln4_1_fu_88_p1 = esl_sext<32,29>(tmp_3_fu_78_p4.read());
}

void eq::thread_sext_ln4_2_fu_92_p1() {
    sext_ln4_2_fu_92_p1 = esl_sext<32,29>(tmp_reg_132.read());
}

void eq::thread_sext_ln4_fu_45_p0() {
    sext_ln4_fu_45_p0 = b.read();
}

void eq::thread_sub_ln4_1_fu_102_p2() {
    sub_ln4_1_fu_102_p2 = (!ap_const_lv32_0.is_01() || !select_ln4_fu_95_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(select_ln4_fu_95_p3.read()));
}

void eq::thread_sub_ln4_fu_73_p2() {
    sub_ln4_fu_73_p2 = (!ap_const_lv65_0.is_01() || !mul_ln4_reg_121.read().is_01())? sc_lv<65>(): (sc_biguint<65>(ap_const_lv65_0) - sc_biguint<65>(mul_ln4_reg_121.read()));
}

void eq::thread_tmp_2_fu_55_p1() {
    tmp_2_fu_55_p1 = b.read();
}

void eq::thread_tmp_3_fu_78_p4() {
    tmp_3_fu_78_p4 = sub_ln4_fu_73_p2.read().range(64, 36);
}

void eq::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void eq::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a\" :  \"" << a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b\" :  \"" << b.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

